# basic world file
# lines starting with hashtags are ignored when parsed

# documentation:

# blocks are any chars enclosed by two brackets and a delimiter character.  here are all valid blocks (* = optional, in reference to a parameter):

# %[texturePath, textureName] = a special use block for initializing textures.  textures need to be loaded and given names in order to be referenced by other blocks, so this block should exist before any reference to it by another block
# *[shapeName, vertexDataName] = a special use block for initializing vertex data.  vertex data needs to be loaded and given names in order to be referenced by other blocks, so this block should exist before any reference to it by another block
# +[modelPath, modelName, x, y, z, w, h, d] = a special use block for initializing models.  models need to be loaded and given names in order to be referenced by other blocks, so this block should exist before any reference to it by another block.  the (x,y,z) and (w,h,d) parameters are for bounding box offset and size, but only need to be defined if using walkmaps (the full scale .world parser does not require these values)
# .[audioPath, audioName] = a special use block for initializing audio files.  audio needs to be loaded and given a name in order to be referenced by other blocks, so this block should exist before any reference to it by another block.  this does not need to be used to initialize background music (that's streamed straight from source)
# $[x, y, z, y, p, r, w, h, d, *textureName, vertexDataName] = object block.  creates a new object with the given coordinates (x,y,z), rotation (y,p,r), size (w,h,d), texture (not required if using a model, which load their own textures), and vertex data (or default)
# &[x, y, z, r, g, b, c, l, q, ambientStrength, diffuseStrength] = light block.  creates a point light with the given coordinates (x,y,z), color (r,g,b), constant+linear+quadratic values for attenuation (c,l,q), and ambient + diffuse strength
# ~[x, y, z, w, d, adjacents...] = walkmap box block.  defines walkable space in a world.  adjacents... are indexes to other adjacent bounding boxes.  usually these are in generated walkmaps and are not used in .world files, but it's still technically a valid block, and will still work to define walkable space in .world files.
# @[playerHeight, playerRadius, stepHeight, maxPlayerSpeed, heightSpeed] = settings block, used to define general world settings.  if using a walkmap, this block will get overriden by the walkmap's settings block.  if not present, the scene defaults to: playerHeight = 2.f, playerRadius = 0.5f, stepHeight = 0.4f, maxPlayerSpeed = 2.f, heightSpeed = 0.1f
# ![x, y, z, w, h, d, event (eventParams...), action (actionParams...)] = a trigger block, which, for lack of a better explanation, can trigger things to happen.  more info on triggers is in the section below keywords.  note that the lack of separator between event and (eventParams...) is not accidental.  There should be no separator between the parameters of the event and the parameters of the action, and both sets of parameters should be wrapped in parenthesis.  This is to differentiate between the two lists, because the parser only interprets parameters as 2 separate lists of strings and numbers, which is difficult to work with when considering two boundless sets of strings/numbers in the same block.

# some texture names have special meanings:

# default = default texture used when textureName is invalid.  if no default is defined, then an invalid textureName throws an error while parsing.


# some vertex data names have special meanings:

# default = default vertex data used when vertexDataName is invalid or unspecified.  if no default is defined, then an invalid or unspecified vertexDataName throws an error while parsing.


# keywords are extra string values which can be included at the end of blocks (currently, all keywords are for object blocks).  multiple 

# invisible = using this keyword in an object won't make the object invisible as the name would suggest, but rather forces the engine's world parser to ignore the object altogether.  It will not be ignored by the walkmap generator's parser, however, which makes this useful for creating invisible barriers and floors in walkmaps.
# nowalk = add this as the last string parameter in an object block to have the walkmap generator ignore it.  this isn't a reserved texture name or vertex data name, but rather a special keyword meaning that textures and vertex data can still be named "nowalk" (if you really want to).  Think of this keyword like the opposite of the "invisible" keyword: this keyword makes the player not collide with things which are there, while invisible makes the player collide with things which aren't there.  These two keywords can be used together to control player collision with objects which might be hard to control otherwise, such as models which have hollow space.  A good example of this is with the archway below, which can't be adequately represented by the single bounding box created for it but can be adequately represented by 3 invisible objects.


# more info on trigger blocks (or just "triggers"):

# triggers allow certain predefined actions to occur on certain predefined events.  the events are usually centered around player interaction, but there are exceptions.  triggers are fired when their triggerEvent happens.  multiple triggers can be defined for a single event.  a trigger does not always need a bounding cube (the x,y,z,w,h,d parameters in trigger block), but if at least 1 size parameter (w,h,d) is greater than 0, then the trigger can only be fired if the player is intersecting the defined bounding cube (and if the their triggerEvent happens).  if a trigger's event requires a bounding cube but the bounding cube scale is 0,0,0, the trigger will probably break.

# all valid trigger events:
# onStart = fires the first time checkTriggers is called internally, and then never fires again.  does not require a bounding cube.
# onEnter = fires only once when the player enters the trigger's bounding cube, and then can't be fired again until the player leaves the bounding cube.  requires a bounding cube.
# onEnterRepeat/onEnterRepeating = similar to onEnter, except that it fires every frame that the player is intersecting the bounding cube.  requires a bounding cube.
# onExit = fires only once when the player leaves the trigger's bounding cube, and then can't be fired again until the player re-enters the bounding cube.  requires a bounding cube.
# onKeyPress = fires when the player presses a button defined in the trigger parameters.  only fires once when pressed, and then won't fire again until the player releases the button.  requires one parameter, which is the GLFW key code of the key.  does not require a bounding cube.
# onKeyHold = fires while the player is holding down a button defined in the trigger parameters.  requires one parameter, which is the GLFW key code of the key.  does not require a bounding cube.
# onKeyRelease = fires when the player releases a held button.  requires one parameter, which is the GLFW key code of the key.  does not require a bounding cube.

# all valid trigger actions:
# * = optional parameter

# -- misc/debug --

# logToConsole
	# logs every parameter to the console, first strings and then numbers, separated by commas.
	# this could make things laggy if repeated every frame, and should probably only be used for debugging anyways

# changeSetting
	# changes a setting (any of the settings block settings) to a different value.  note that because walkmaps are generated ahead of time and not by the engine, changing some settings could result in weird behavior if the walkmap was generated on different settings, or just won't do anything at all.  any "unsafe" or "useless" settings to change are marked as such below.
	# parameters:
		# settingIndex - the zero based index of the setting to change.  valid vals are:
			# 0 - playerHeight.  this is an unsafe setting and can cause the player to look through objects above them or be prevented from going under objects they should fit under if this changes.
			# 1 - playerRadius.  this is an useless setting and has no effect when changed.
			# 2 - stepHeight.  this is a useless settings and has no effect when changed.
			# 3 - maxPlayerSpeed.
			# 4 - heightSpeed.
		# settingValue - the new value for the setting.  valid vals = any float value
	#

# -- audio related --

# playBackgroundMusic
	# plays music in the background.  the music is a global sound not relative to the player.  only one track of background music can play at a time, so this will override whatever background music was already playing if there was any.
	# parameters:
		# path - the path to the track to play.  valid vals = any string with no whitespace.
		# volume - the volume of the music.  valid vals = any float value in the range [0, 100]
		# loop - whether to loop the music when it ends or not.  valid vals = true/false
	#

# setBackgroundMusicSettings
	# change background music volume/if it loops.
	# parameters:
		# volume - same as playBackgroundMusic
		# loop - same as playBackgroundMusic
	#

# playAudio
	# plays a sound loaded with an audio block, which can be spatial if desired.
	# if spatial, the position of the trigger is used as the position of the audio.
	# parameters:
		# name - the name of the audio file (as loaded in the audio block) to play.  valid vals = any string with no whitespace that's a valid name for an audio file loaded by an audio block.
		# volume - the volume of the audio file.  valid vals = any float value in the range [0, 100]
		# loop - whether to loop the sound when it ends or not.  valid vals = true/false
		# spatial - whether the audio is spatial (depends on trigger position) or not.  if it is, the position is based off of the trigger position.  valid vals = true/false
		# attenuation* - attenuation value, see SFML documentation for info.  valid vals = any float value >= 0
		# minDistance* - minimum distance, see SFML documentation for info.  valid vals = any float value > 0 (=0 is forbidden by SFML)
		
	
# basic world starts here...

# texture initialization blocks

%[./res/textures/default.png, default]
%[./res/textures/oldmuseum/greyfloor.png, floor]
%[./res/textures/oldmuseum/wall.png, wall]

# audio blocks

.[./res/sounds/test1.ogg, test1]
.[./res/sounds/test2.ogg, test2]

# vertex data initialization blocks

*[cube, cube, 0, 0, 0, 1, 1, 1]


# model blocks

+[./res/models/Avocado.glb, avocado, 0, 3.15, 0, 5, 6.5, 3]
+[./res/models/SmilingFace.glb, smiley, 0, 0, -0.05, 1.7, 1.7, 1.7]
+[./res/models/CesiumMan.glb, man, 0, 0, 0.75, 0.4, 1.15, 1.55]
+[./res/models/archway.glb, archway, 0, 0, 0, 5, 1, 8]


# object blocks

# enclosure
$[0, 0, 0,    0, 0, 0,    12, 1, 10,    floor,    cube]
$[0, 11, 0,    0, 0, 0,    12, 1, 10,    wall,    cube]

$[5.5, 5.5, 0,    0, 0, 0,    1, 10, 10,   wall,    cube]
$[-5.5, 5.5, 0,    0, 0, 0,    1, 10, 10,   wall,    cube]
$[0, 5.5, 5.5,    0, 0, 0,    10, 10, 1,   wall,    cube]

# archway wall
$[-3.75, 5.5, -4.5,    0, 0, 0,    2.5, 10, 1,   wall,    cube]
$[3.75, 5.5, -4.5,    0, 0, 0,    2.5, 10, 1,   wall,    cube]
$[0, 9.5, -4.5,    0, 0, 0,    5, 2, 1,   wall,    cube]

# archway
# here's a good example of how to use nowalk and invisible to create adequate collisions for an object that can't be properly represented by just the bounding box

# we make the actual archway itself nowalk so that the large bounding box doesn't prevent the player from walking through it
$[0, 4.5, -4.5,     -90, 0, 0,    1, 1, 1,    archway,    nowalk]

# then make two invisible walls where the actual archway walls are
$[2.25, 4.5, -4.5,    0, 0, 0,    0.5, 8, 1,    default,    cube,    invisible]
$[-2.25, 4.5, -4.5,    0, 0, 0,    0.5, 8, 1,    default,    cube,    invisible]

# fun little exhibits
$[-4, 1.5, 1,     0, 90, 0,    1, 1, 1,    smiley]
$[4, 0.65, 1,     -90, 180, 0,    3, 3, 3,    man]
$[0, 1, 4,     0, 180, 0,    0.2, 0.2, 0.2,    avocado]

# light blocks

&[0, 3, 0,     1, 1, 1,    1, 0.072, 0.0175,     0.4, 0.8]


# map logic (triggers)

# log something to console on start
![0,0,0,0,0,0, onStart, logToConsole (Hello, World)]

# play background music on start
![0,0,0,0,0,0, onStart, playBackgroundMusic (./res/sounds/stal.ogg, 2, true)]

# change height every time the player goes near the cesium man
![3, 2.5, 1, 1, 4, 1, onEnterRepeating, changeSetting (0, 4.4)]
![3, 2.5, 1, 1, 4, 1, onExit, changeSetting (0, 2)]

# blast music every time the player goes near the smiley face
# I don't recommend using this to create false spatial audio, since real spatial audio is supported.
![-4, 1.5, 0.95, 2.7, 2.7, 2.7, onEnter, setBackgroundMusicSettings (40, true)]
![-4, 1.5, 0.95, 2.7, 2.7, 2.7, onExit, setBackgroundMusicSettings (2, true)]

# play a sound when the player touches the avocado
![0, 1.63, 4, 1.2, 1.2, 1.2, onEnter, playAudio (test1, 100, false, true)]

# change player height with T key
![0,0,0,0,0,0, onKeyHold (84), changeSetting (0, 6)]
![0,0,0,0,0,0, onKeyRelease (84), changeSetting (0, 2)]

# play some example audio when the player is in this box and presses E
$[-3, 2, -3,    0, 0, 0,    1.5, 1.5, 1.5,    default,    cube,    nowalk]
![-3, 2, -3, 1.5, 1.5, 1.5, onKeyPress (69), playAudio (test2, 100, false, true)]